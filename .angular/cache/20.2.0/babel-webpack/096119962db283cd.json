{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    BASE = environment.API_URL.replace(/\\/$/, '');\n    HTTP_OPTS = {}; // no cookies for JWT\n    LS_KEY = 'transactions';\n    constructor(http) {\n      this.http = http;\n    }\n    /* -------- Auth -------- */\n    register(payload) {\n      return this.http.post(`${this.BASE}/auth/register`, payload, this.HTTP_OPTS);\n    }\n    login(payload) {\n      return this.http.post(`${this.BASE}/auth/login`, payload, this.HTTP_OPTS);\n    }\n    me() {\n      return this.http.get(`${this.BASE}/auth/me`, this.HTTP_OPTS);\n    }\n    logout() {\n      return this.http.post(`${this.BASE}/auth/logout`, {}, this.HTTP_OPTS);\n    }\n    /* ---- Transactions ---- */\n    getTransactions() {\n      return this.http.get(`${this.BASE}/transactions`, this.HTTP_OPTS).pipe(map(res => res?.transactions ?? []), catchError(() => of(this.getAllLocal())));\n    }\n    addTransaction(tx) {\n      return this.http.post(`${this.BASE}/transactions`, tx, this.HTTP_OPTS).pipe(catchError(() => of(this.createLocal(tx))));\n    }\n    updateTransaction(id, patch) {\n      return this.http.put(`${this.BASE}/transactions/${encodeURIComponent(id)}`, patch, this.HTTP_OPTS).pipe(catchError(() => of(this.updateLocal(id, patch))));\n    }\n    deleteTransaction(id) {\n      return this.http.delete(`${this.BASE}/transactions/${encodeURIComponent(id)}`, this.HTTP_OPTS).pipe(catchError(() => {\n        this.deleteLocal(id);\n        return of({\n          deleted: true\n        });\n      }));\n    }\n    /* --- Summary / Budget / Export --- */\n    getMonthlySummary() {\n      return this.http.get(`${this.BASE}/summary`, this.HTTP_OPTS);\n    }\n    getBudget() {\n      return this.http.get(`${this.BASE}/budget`, this.HTTP_OPTS);\n    }\n    upsertBudget(limit, threshold = 90) {\n      return this.http.put(`${this.BASE}/budget`, {\n        limit,\n        threshold\n      }, this.HTTP_OPTS);\n    }\n    // ✅ Fix: make HttpClient return Blob, not ArrayBuffer\n    exportTransactionsCsv(type) {\n      let params = new HttpParams();\n      if (type) params = params.set('type', type);\n      return this.http.get(`${this.BASE}/transactions/export/csv`, {\n        params,\n        // Angular typing trick: tells HttpClient this is a blob response\n        responseType: 'blob'\n      });\n    }\n    /* --- Local storage fallback --- */\n    getAllLocal() {\n      try {\n        return JSON.parse(localStorage.getItem(this.LS_KEY) || '[]');\n      } catch {\n        return [];\n      }\n    }\n    setAllLocal(list) {\n      localStorage.setItem(this.LS_KEY, JSON.stringify(list));\n    }\n    createLocal(tx) {\n      const list = this.getAllLocal();\n      const withId = {\n        ...tx,\n        id: globalThis.crypto?.randomUUID ? globalThis.crypto.randomUUID() : String(Date.now())\n      };\n      list.push(withId);\n      this.setAllLocal(list);\n      return withId;\n    }\n    updateLocal(id, patch) {\n      const list = this.getAllLocal();\n      const i = list.findIndex(t => t.id === id);\n      if (i >= 0) {\n        list[i] = {\n          ...list[i],\n          ...patch\n        };\n        this.setAllLocal(list);\n        return list[i];\n      }\n      return null;\n    }\n    deleteLocal(id) {\n      this.setAllLocal(this.getAllLocal().filter(t => t.id !== id));\n    }\n    static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
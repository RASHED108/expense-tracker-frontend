{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { NgChartsModule } from 'ng2-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api.service\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"ng2-charts\";\nfunction DashboardComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"currency\");\n    i0.ɵɵpipe(3, \"currency\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \\u26A0\\uFE0F Alert: Monthly spending (\", i0.ɵɵpipeBind1(2, 2, ctx_r0.monthlySpending), \") has exceeded your budget of \", i0.ɵɵpipeBind1(3, 4, ctx_r0.monthlyLimit), \"!\\n\");\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    api;\n    auth;\n    // header\n    userEmail = null;\n    // all-time list & cards\n    transactions = [];\n    totalTransactions = 0;\n    totalIncome = 0; // all-time\n    totalExpenses = 0; // all-time\n    totalAmount = 0; // all-time (income + expense)\n    // all-time chart sources\n    allIncome = 0;\n    allExpenses = 0;\n    allCategoryTotals = {};\n    // monthly summary (alert + monthly charts)\n    monthIncome = 0;\n    monthExpenses = 0;\n    monthCategoryTotals = {};\n    monthlySpending = 0;\n    // budget\n    budget = {\n      limit: 50,\n      threshold: 90\n    };\n    budgetLimitInput = 50;\n    budgetThresholdInput = 90;\n    savingBudget = false;\n    // chart scope\n    chartScope = 'all';\n    loading = true;\n    error = '';\n    // bar palette\n    palette = ['#3f51b5', '#e91e63', '#4caf50', '#ff9800', '#9c27b0', '#03a9f4', '#795548', '#00bcd4', '#8bc34a', '#ff5722'];\n    // charts\n    barChartType = 'bar';\n    barChartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        label: 'Spending by Category',\n        maxBarThickness: 48,\n        borderRadius: 6,\n        backgroundColor: []\n      }]\n    };\n    barChartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true\n        }\n      },\n      scales: {\n        x: {\n          ticks: {\n            autoSkip: false\n          },\n          grid: {\n            display: false\n          }\n        },\n        y: {\n          beginAtZero: true,\n          ticks: {\n            precision: 0\n          },\n          suggestedMax: 10\n        }\n      },\n      layout: {\n        padding: {\n          top: 8,\n          right: 8,\n          bottom: 8,\n          left: 8\n        }\n      }\n    };\n    pieChartType = 'pie';\n    pieChartData = {\n      labels: ['Income', 'Expenses'],\n      datasets: [{\n        data: [],\n        backgroundColor: ['#4caf50', '#f44336'],\n        borderColor: '#ffffff',\n        borderWidth: 2\n      }]\n    };\n    pieChartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'bottom'\n        }\n      },\n      layout: {\n        padding: {\n          top: 8,\n          right: 8,\n          bottom: 8,\n          left: 8\n        }\n      }\n    };\n    constructor(api, auth) {\n      this.api = api;\n      this.auth = auth;\n    }\n    ngOnInit() {\n      this.userEmail = this.auth.email;\n      this.fetchSummary(); // monthly\n      this.fetchTransactions(); // all-time\n      this.fetchBudget(); // form + alert\n    }\n    // ---------- API ----------\n    fetchSummary() {\n      // backend: GET /summary/month -> { totalIncome, totalExpenses, categoryTotals, ... }\n      this.api.getMonthlySummary().subscribe({\n        next: s => {\n          this.monthIncome = Number(s?.totalIncome || 0);\n          this.monthExpenses = Number(s?.totalExpenses || 0);\n          this.monthCategoryTotals = s?.categoryTotals || {};\n          this.monthlySpending = this.monthExpenses;\n          if (this.chartScope === 'month') this.prepareCharts();\n          this.loading = false;\n        },\n        error: err => {\n          this.error = err?.error?.message || 'Failed to load monthly summary';\n          this.loading = false;\n        }\n      });\n    }\n    fetchTransactions() {\n      this.api.getTransactions().subscribe({\n        next: list => {\n          this.transactions = Array.isArray(list) ? list : [];\n          this.totalTransactions = this.transactions.length;\n          this.totalIncome = this.transactions.filter(t => t.type === 'income').reduce((s, t) => s + Number(t.amount || 0), 0);\n          this.totalExpenses = this.transactions.filter(t => t.type === 'expense').reduce((s, t) => s + Number(t.amount || 0), 0);\n          this.totalAmount = this.totalIncome + this.totalExpenses;\n          this.allIncome = this.totalIncome;\n          this.allExpenses = this.totalExpenses;\n          this.allCategoryTotals = this.groupExpensesByCategory(this.transactions);\n          if (this.chartScope === 'all') this.prepareCharts();\n        },\n        error: err => console.error('Transaction fetch failed:', err)\n      });\n    }\n    fetchBudget() {\n      this.api.getBudget().subscribe({\n        next: b => {\n          this.budget = b || {\n            limit: 50,\n            threshold: 90\n          };\n          this.budgetLimitInput = Number(this.budget.limit || 50);\n          this.budgetThresholdInput = Number(this.budget.threshold || 90);\n        },\n        error: () => {\n          this.budget = {\n            limit: 50,\n            threshold: 90\n          };\n          this.budgetLimitInput = 50;\n          this.budgetThresholdInput = 90;\n        }\n      });\n    }\n    // ---------- helpers ----------\n    groupExpensesByCategory(list) {\n      const out = {};\n      list.filter(t => t.type === 'expense').forEach(t => {\n        const c = t.category || 'Other';\n        out[c] = (out[c] || 0) + Number(t.amount || 0);\n      });\n      return out;\n    }\n    onScopeChange() {\n      this.prepareCharts();\n    }\n    prepareCharts() {\n      const catTotals = this.chartScope === 'all' ? this.allCategoryTotals : this.monthCategoryTotals;\n      const labels = Object.keys(catTotals);\n      const data = Object.values(catTotals);\n      const max = data.length ? Math.max(...data) : 0;\n      this.barChartOptions = {\n        ...this.barChartOptions,\n        scales: {\n          x: {\n            ticks: {\n              autoSkip: false\n            },\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            beginAtZero: true,\n            ticks: {\n              precision: 0\n            },\n            suggestedMax: max ? max * 1.25 : 10\n          }\n        }\n      };\n      const barColors = labels.map((_, i) => this.palette[i % this.palette.length]);\n      this.barChartData = {\n        labels,\n        datasets: [{\n          ...this.barChartData.datasets[0],\n          data,\n          backgroundColor: barColors\n        }]\n      };\n      const pieIncome = this.chartScope === 'all' ? this.allIncome : this.monthIncome;\n      const pieExpense = this.chartScope === 'all' ? this.allExpenses : this.monthExpenses;\n      this.pieChartData = {\n        labels: ['Income', 'Expenses'],\n        datasets: [{\n          ...this.pieChartData.datasets[0],\n          data: [pieIncome, pieExpense],\n          backgroundColor: ['#4caf50', '#f44336'],\n          borderColor: '#ffffff',\n          borderWidth: 2\n        }]\n      };\n    }\n    // ----- Budget form -----\n    saveBudget() {\n      const limit = Number(this.budgetLimitInput);\n      const threshold = Number(this.budgetThresholdInput);\n      if (!isFinite(limit) || limit <= 0) {\n        alert('Please enter a valid positive budget limit.');\n        return;\n      }\n      this.savingBudget = true;\n      this.api.upsertBudget(limit, threshold).subscribe({\n        next: b => {\n          this.savingBudget = false;\n          this.budget = b;\n          alert('Budget updated!');\n          this.fetchSummary();\n        },\n        error: () => {\n          this.savingBudget = false;\n          alert('Failed to save budget.');\n        }\n      });\n    }\n    // stat helpers\n    getHighestIncome() {\n      const a = this.transactions.filter(t => t.type === 'income').map(t => Number(t.amount || 0));\n      return a.length ? Math.max(...a) : 0;\n    }\n    getLowestIncome() {\n      const a = this.transactions.filter(t => t.type === 'income').map(t => Number(t.amount || 0));\n      return a.length ? Math.min(...a) : 0;\n    }\n    getAverageIncome() {\n      const a = this.transactions.filter(t => t.type === 'income').map(t => Number(t.amount || 0));\n      const s = a.reduce((sum, v) => sum + v, 0);\n      return a.length ? s / a.length : 0;\n    }\n    getHighestExpense() {\n      const a = this.transactions.filter(t => t.type === 'expense').map(t => Number(t.amount || 0));\n      return a.length ? Math.max(...a) : 0;\n    }\n    getLowestExpense() {\n      const a = this.transactions.filter(t => t.type === 'expense').map(t => Number(t.amount || 0));\n      return a.length ? Math.min(...a) : 0;\n    }\n    getAverageExpense() {\n      const a = this.transactions.filter(t => t.type === 'expense').map(t => Number(t.amount || 0));\n      const s = a.reduce((sum, v) => sum + v, 0);\n      return a.length ? s / a.length : 0;\n    }\n    // alert visibility\n    get showAlert() {\n      return (this.budget.limit || 0) > 0 && this.monthlySpending >= (this.budget.limit || 0);\n    }\n    get monthlyLimit() {\n      return this.budget.limit || 0;\n    }\n    static ɵfac = function DashboardComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DashboardComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.AuthService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 75,\n      vars: 43,\n      consts: [[\"class\", \"alert\", 4, \"ngIf\"], [1, \"card\", \"budget-editor\"], [1, \"field\"], [\"type\", \"number\", \"min\", \"0.01\", \"step\", \"0.01\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"number\", \"min\", \"1\", \"max\", \"100\", \"step\", \"1\", 3, \"ngModelChange\", \"ngModel\"], [3, \"click\", \"disabled\"], [1, \"grid-3\", \"cards\"], [1, \"card\"], [1, \"grid-2\", \"cards\"], [3, \"ngModelChange\", \"ngModel\"], [\"value\", \"all\"], [\"value\", \"month\"], [1, \"chart-box\"], [\"baseChart\", \"\", 3, \"type\", \"data\", \"options\"], [1, \"chart-box\", \"pie\"], [1, \"alert\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, DashboardComponent_div_2_Template, 4, 6, \"div\", 0);\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"label\");\n          i0.ɵɵtext(6, \"Monthly budget\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"input\", 3);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_7_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.budgetLimitInput, $event) || (ctx.budgetLimitInput = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\");\n          i0.ɵɵtext(10, \"Alert threshold (%)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"input\", 4);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_11_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.budgetThresholdInput, $event) || (ctx.budgetThresholdInput = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_12_listener() {\n            return ctx.saveBudget();\n          });\n          i0.ɵɵtext(13);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 6)(15, \"div\", 7)(16, \"strong\");\n          i0.ɵɵtext(17, \"Total Transactions:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(18);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 7)(20, \"strong\");\n          i0.ɵɵtext(21, \"Total Amount:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(22);\n          i0.ɵɵpipe(23, \"currency\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 7)(25, \"strong\");\n          i0.ɵɵtext(26, \"Total Income:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(27);\n          i0.ɵɵpipe(28, \"currency\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"div\", 7)(30, \"strong\");\n          i0.ɵɵtext(31, \"Total Expenses:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(32);\n          i0.ɵɵpipe(33, \"currency\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"div\", 8)(35, \"div\", 7)(36, \"h3\");\n          i0.ɵɵtext(37, \"Income Statistics\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"div\");\n          i0.ɵɵtext(39);\n          i0.ɵɵpipe(40, \"currency\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"div\");\n          i0.ɵɵtext(42);\n          i0.ɵɵpipe(43, \"currency\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(44, \"div\");\n          i0.ɵɵtext(45);\n          i0.ɵɵpipe(46, \"currency\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(47, \"div\", 7)(48, \"h3\");\n          i0.ɵɵtext(49, \"Expense Statistics\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(50, \"div\");\n          i0.ɵɵtext(51);\n          i0.ɵɵpipe(52, \"currency\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"div\");\n          i0.ɵɵtext(54);\n          i0.ɵɵpipe(55, \"currency\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(56, \"div\");\n          i0.ɵɵtext(57);\n          i0.ɵɵpipe(58, \"currency\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(59, \"div\", 7)(60, \"label\");\n          i0.ɵɵtext(61, \" Chart scope: \");\n          i0.ɵɵelementStart(62, \"select\", 9);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function DashboardComponent_Template_select_ngModelChange_62_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.chartScope, $event) || (ctx.chartScope = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_select_ngModelChange_62_listener() {\n            return ctx.onScopeChange();\n          });\n          i0.ɵɵelementStart(63, \"option\", 10);\n          i0.ɵɵtext(64, \"All time\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(65, \"option\", 11);\n          i0.ɵɵtext(66, \"This month\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(67, \"h3\");\n          i0.ɵɵtext(68);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(69, \"div\", 12);\n          i0.ɵɵelement(70, \"canvas\", 13);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(71, \"h3\");\n          i0.ɵɵtext(72);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(73, \"div\", 14);\n          i0.ɵɵelement(74, \"canvas\", 13);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\"Welcome, \", ctx.userEmail, \"!\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showAlert);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.budgetLimitInput);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.budgetThresholdInput);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.savingBudget);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.savingBudget ? \"Saving...\" : \"Save Budget\", \" \");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", ctx.totalTransactions);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(23, 25, ctx.totalAmount));\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(28, 27, ctx.totalIncome));\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(33, 29, ctx.totalExpenses));\n          i0.ɵɵadvance(7);\n          i0.ɵɵtextInterpolate1(\"Highest Income: \", i0.ɵɵpipeBind1(40, 31, ctx.getHighestIncome()));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"Lowest Income: \", i0.ɵɵpipeBind1(43, 33, ctx.getLowestIncome()));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"Average Income: \", i0.ɵɵpipeBind1(46, 35, ctx.getAverageIncome()));\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\"Highest Expense: \", i0.ɵɵpipeBind1(52, 37, ctx.getHighestExpense()));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"Lowest Expense: \", i0.ɵɵpipeBind1(55, 39, ctx.getLowestExpense()));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"Average Expense: \", i0.ɵɵpipeBind1(58, 41, ctx.getAverageExpense()));\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.chartScope);\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\"Spending by Category (\", ctx.chartScope === \"all\" ? \"All Time\" : \"This Month\", \")\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"type\", ctx.barChartType)(\"data\", ctx.barChartData)(\"options\", ctx.barChartOptions);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"Income vs Expenses (\", ctx.chartScope === \"all\" ? \"All Time\" : \"This Month\", \")\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"type\", ctx.pieChartType)(\"data\", ctx.pieChartData)(\"options\", ctx.pieChartOptions);\n        }\n      },\n      dependencies: [CommonModule, i3.NgIf, RouterModule, FormsModule, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.MinValidator, i4.MaxValidator, i4.NgModel, NgChartsModule, i5.BaseChartDirective, i3.CurrencyPipe],\n      styles: [\".cards[_ngcontent-%COMP%]{gap:16px;margin-bottom:16px}.grid-3[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(3,1fr)}.grid-2[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(2,1fr)}.card[_ngcontent-%COMP%]{background:#fff;border:1px solid #eee;border-radius:8px;padding:12px}.alert[_ngcontent-%COMP%]{background:#ffe3e3;border:1px solid #f5b5b5;color:#b00020;padding:12px;border-radius:6px;margin:12px 0;text-align:center}.budget-editor[_ngcontent-%COMP%]{display:flex;gap:12px;align-items:end;flex-wrap:wrap;margin-bottom:16px}.budget-editor[_ngcontent-%COMP%]   .field[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:4px}.chart-box[_ngcontent-%COMP%]{position:relative;height:340px;margin-bottom:16px}.chart-box.pie[_ngcontent-%COMP%]{height:260px;max-width:720px;margin-left:auto;margin-right:auto}@media (max-width: 900px){.grid-3[_ngcontent-%COMP%], .grid-2[_ngcontent-%COMP%]{grid-template-columns:1fr}}\"]\n    });\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}